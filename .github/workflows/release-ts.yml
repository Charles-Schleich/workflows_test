name: Release ts_project

on:
  # push:
  #   tags:
  #     - '[0-9]+.*'
  workflow_dispatch:
    inputs:
      live-run:
        type: boolean
        description: Live-run
        required: false
      version:
        type: string
        description: Release number
        required: true

defaults:
  run:
    shell: bash

jobs:
  tag:
    name: Publish Typescript Project
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{ steps.create-release-branch.outputs.version }}
      branch: ${{ steps.create-release-branch.outputs.branch }}

    steps:
      - id: create-release-branch
        uses: charles-schleich/ci/create-release-branch@main
        with:
          repo: ${{ github.repository }}
          live-run: ${{ inputs.live-run || false }}
          version: ${{ inputs.version }}
          branch: ${{ inputs.branch }}
          github-token: ${{ secrets.BOT_TOKEN_WORKFLOW }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.create-release-branch.outputs.branch }}

      - name: Bump and tag project
        run: bash ci/scripts/bump-and-tag.bash
        env:
          LIVE_RUN: ${{ inputs.live_run || false }}
          VERSION: ${{ inputs.version }}
          GIT_USER_NAME: charles-schleich-bot
          GIT_USER_EMAIL: charles-schleich-bot@users.noreply.github.com

      - name: git config
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

  # Dont worry about building the rust Plugin for now
  # build-standalone:
  #   name: Build executables and libraries
  #   needs: tag
  #   uses: eclipse-zenoh/ci/.github/workflows/build-crates-standalone.yml@main
  #   with:
  #     repo: ${{ github.repository }}
  #     version: ${{ needs.tag.outputs.version }}
  #     branch: ${{ needs.tag.outputs.branch }}
  #     artifact-patterns: |
  #       ^libplugin-library(2)?\.(dylib|so)$
  #       ^plugin-library(2)?\.dll$
  #   secrets: inherit

  build-ts:
    runs-on: ubuntu-latest
    needs: tag
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.tag.outputs.branch }}

      - name: Install Dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install
          dir: ./ts_project

      - name: Transpile Code
        working-directory: ./ts_project
        run: |
          yarn run build

      - name: Cleanup
        working-directory: ./ts_project
        if: always()
        run: |
          rm -rf node_modules
          rm -rf dist
          rm -rf package-lock.json

  npm:
    - name: Publish
      id: publish
      shell: bash
      env:
        NPM_AUTH_TOKEN: ${{secrets.NPM_AUTH_TOKEN}}
        NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
      run: |
        npm install
        npm publish --provenance --access public